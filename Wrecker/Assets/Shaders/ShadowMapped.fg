#version 450
layout(location = 0) in vec2 fsin_texCoords;
layout(location = 1) in vec3 fsin_normal;
layout(location = 3) in float fsin_OpacityScale;
layout(location = 4) in vec4 fsin_FragPosLightSpace;
layout(location = 5) in float fsin_light;

layout(location = 0) out vec4 fsout_color;
layout(set = 0, binding = 2) uniform SceneLighting
{
    vec4 DiffuseLightColour;
    vec3 DiffuseLightDirection;
    vec4 AmbientLightColour;
    float AmbientLightStrength;
};
layout(set = 2, binding = 0) uniform texture2D SurfaceTexture;
layout(set = 2, binding = 1) uniform sampler SurfaceSampler;
layout(set = 2, binding = 2) uniform TextureColour
{
    vec4 Colour;
};

layout(set = 4, binding = 2) uniform texture2D LightDepthTexture;
layout(set = 4, binding = 3) uniform sampler LightDepthSampler;

float shadowTest(vec4 fragPosLightSpace, float surfaceLightDiff)
{
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;

    if(projCoords.z > 1.0)
        return 0.0;

    projCoords.x = projCoords.x * 0.5 + 0.5;
    projCoords.y = -projCoords.y * 0.5 + 0.5;
    float currentDepth = projCoords.z;
    float bias = max(0.0001 * (1.0 - surfaceLightDiff), 0.00001);

	float shadow = 0.0;
	vec2 texelSize = 1.0 / vec2(1024 * 4, 1024 * 4);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(sampler2D(LightDepthTexture, LightDepthSampler), projCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
		}    
	}

	shadow = shadow > 1 ? 1 : 0;

    return shadow;
}

void main()
{
    vec4 ambient = 1 * 0.3 * AmbientLightColour;
	
    vec3 norm = normalize(fsin_normal);
    float diff = max(dot(norm, DiffuseLightDirection), 0);
    // vec4 diffuse = 0.7 * diff * DiffuseLightColour;
    vec4 diffuse = vec4(1, 1, 1, 0);
	
    vec4 objectColour = texture(sampler2D(SurfaceTexture, SurfaceSampler), fsin_texCoords) * Colour;
    float shadow = shadowTest(fsin_FragPosLightSpace, diff);
	//vec4 lighting = ((1 - shadow) * diffuse + ambient) * objectColour;
	vec4 lighting = fsin_light * objectColour;
    fsout_color = vec4(lighting.xyz, objectColour.w * fsin_OpacityScale);
}